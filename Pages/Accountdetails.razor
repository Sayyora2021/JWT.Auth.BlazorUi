@page "/accountdetails/{accountIdString}"
@using JWT.Auth.BlazorUi.Models
@using System.Net.Http.Headers
@using JWT.Auth.BlazorUi.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager
@inject IAccountService AccountService
@inject IHttpClientFactory ClientFactory
@using System.Text.Json.Serialization;
@using System.Net.Http.Json
@using static System.Runtime.InteropServices.JavaScript.JSType
@using static JWT.Auth.BlazorUi.Pages.Accountdetails
@inject IAccessTokenProvider TokenProvider
@inject HttpClient Http
@inject IAccountService AccountService


<AuthorizeView>
    @*Only show the list if the user is signed in and authorized*@
    <Authorized>
<h3>Détails du compte</h3>

        @if (accountSelected != null)
        {
            <form>
                <div class="form-group">
                    <label for="inputNom">Nom</label>
                    <input type="text" class="form-control" id="inputNom" value="@(accountSelected.name ?? string.Empty)" >
                </div>
                <div class="form-group">
                    <label for="phone">Téléphone</label>
                    <input type="text" class="form-control" id="phone" value="@(accountSelected.telephone1 ?? string.Empty)" >
                </div>
                <div class="form-group">
                    <label for="inputAddress">Adresse</label>
                    <input type="text" class="form-control" id="inputAddress" value="@(accountSelected.address1_city ?? string.Empty)" >
                </div>
                <div class="form-group">
                    <label for="primaryContact">Contact principal - nom</label>
                    <input type="text" class="form-control" id="primaryContact" value="@(accountSelected.primarycontactid?.fullname ?? string.Empty)"readonly >
                </div>
                <div class="form-group">
                    <label for="primaryContactEmail">Email (Contact principal)</label>
                    <input type="email" class="form-control" id="primaryContactEmail" value="@(accountSelected.primarycontactid?.emailaddress1 ?? string.Empty)" readonly>
                </div>
            </form>
             <div style="margin-top: 20px;">
                <button type="button" class="btn btn-outline-primary" @onclick="()=> ComeBackAccount()">Retour</button>
            </div>
        }
        else
        {
            <p>Le compte n'a pas été trouvé.</p>
        }
 </Authorized>
    <NotAuthorized>
        <h3>Account Failure!</h3>
        <p>You are not authorized.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string accountIdString { get; set; }
    
    private Account accountSelected;

    
    //An informational message
    private string message = "Loading...";

    //Navigation
    private async Task ComeBackAccount()
    {
        NavigationManager.NavigateTo($"/fetchaccounts");
   }
    
    protected override async Task<Account> OnInitializedAsync()
    {
        //Tries to get an access token for the current user with the default set of permissions.
        var tokenResult = await TokenProvider.RequestAccessToken();

        // If the token request was successful
        if (tokenResult.TryGetToken(out var token))
        {
            // Creates an HttpClient based on the named definition found in Program.Main
            var client = ClientFactory.CreateClient("DataverseClient");

            // Prepare the request to get the account by its ID
            var requestUri = $"{client.BaseAddress}accounts({accountIdString})?$select=name,telephone1,address1_city&$expand=primarycontactid($select=fullname,emailaddress1)";
            //var requestUri = $"{client.BaseAddress}accounts({accountIdString}))";


            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri(requestUri)
        };
            //Add the access token
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

            // Specify JSON result is expected
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            // Specify odata.include-annotations preference
            request.Headers.Add("Prefer", "odata.include-annotations=OData.Community.Display.V1.FormattedValue");

            // Send the request
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                // If successful, parse the JSON returned into a strongly typed Account
                accountSelected = await response.Content.ReadFromJsonAsync<Account>();
                return accountSelected;

            }
            else
            {
               
               // Handle errors (similar to your existing code)
               var error = await response.Content.ReadAsStringAsync();
                // Log or display error message
                Console.WriteLine(error);
                return null;
            }
        }
        else
        {
            // Notify user that the token request was not successful
            message = "There was a problem authenticating.";
        }
        return null;

    }
    
}
