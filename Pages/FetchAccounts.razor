@page "/fetchaccounts"
@using JWT.Auth.BlazorUi.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging;
@using System.Text.Json.Serialization;
@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory
@inject ILogger<FetchAccounts> logger;
@inject NavigationManager NavigationManager

<AuthorizeView>
    @*Only show the list if the user is signed in and authorized*@
    <Authorized>
        <h3>Comptes</h3>

        <button class="btn btn-primary" @onclick="CreateNewAccount">Créer</button>
        @if (accounts != null)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Nom</th>
                        <th>Téléphone</th>
                        <th>Adresse: Ville</th>
                        <th>Contact principal</th>
                        <th>Email (courrier électronique)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Account account in accounts.value)
                    {
                        <tr id="@account.accountid">
                           
                            <td>
                                <input type="checkbox" @onclick="() => ShowAccountDetails(account)" />
                              
                            </td>
                            <td>
                                
                                @((account.name != null)
                                    ? account.name
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.telephone1 != null)
                                    ? account.telephone1
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.address1_city != null)
                                    ? account.address1_city
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.primarycontactid != null)
                                    ? (account.primarycontactid.fullname != null
                                    ? account.primarycontactid.fullname
                                    : string.Empty)
                                    : string.Empty)
                            </td>
                            <td>
                                @((account.primarycontactid != null)
                                    ? (account.primarycontactid.emailaddress1 != null
                                    ? account.primarycontactid.emailaddress1
                                    : string.Empty)
                                    : string.Empty)
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => UpdateAccount(account)">
                                    <i class="oi oi-pencil"></i>
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p><em>@message</em></p>
        }
    </Authorized>
    <NotAuthorized>
        <h3>Authentication Failure!</h3>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>


@code {

    //The collection of Account records to display
    private AccountCollection accounts;

    //Selected account
    private Account selectedAccount;

    //An informational message
    private string message = "Loading...";

    //Contains data about an error returned from the Web API
    private Error error;

    private void CreateNewAccount()
    {
        NavigationManager.NavigateTo("/createaccount");
    }
    //Navigation vers getByIdAccount
    private void ShowAccountDetails(Account selectedAccount)
    {
        //NavigationManager.NavigateTo($"accountdetails/{accountIdString}");
        string accountIdString = selectedAccount.accountid.ToString();
        NavigationManager.NavigateTo($"accountdetails/{accountIdString}");
    }
    //Navigation pour update account
    private void UpdateAccount(Account selectedAccount)
    {

        string accountIdString = selectedAccount.accountid.ToString();
        NavigationManager.NavigateTo($"/updateaccount/{accountIdString}");

    }
   

    // Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    // Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed.
    protected override async Task OnInitializedAsync()
    {
        // Tries to get an access token for the current user with the default set of permissions.
        var tokenResult = await TokenProvider.RequestAccessToken();

        // If the token request was successful
        if (tokenResult.TryGetToken(out var token))
        {
            //Creates an HttpClient based on the named definition found in Program.Main
            var client = ClientFactory.CreateClient("DataverseClient");

            //Prepare the request to get the data
            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"{client.BaseAddress}accounts?$select=name,telephone1,address1_city&$expand=primarycontactid($select=fullname,emailaddress1)")
                };
            //Add the access token
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            //Specify a JSON result is expected
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            //Limit the number of results to 10
            request.Headers.Add("Prefer", "odata.maxpagesize=15");

            //Send the request
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                //Parse the JSON returned into a strongly typed AccountCollection
                accounts = await response.Content.ReadFromJsonAsync<AccountCollection>();
            }
            else
            {
                //Parse the JSON returned into a strongly typed Error
                error = await response.Content.ReadFromJsonAsync<Error>();
                error.statuscode = (int)response.StatusCode;
                error.reason = response.ReasonPhrase;
                //Display a message to the user
                message = "An error occurred.";
                //Log the details so they can be seen in the browser console
                logger.LogError($"{error.detail.message}");

            }

        }
        else
        {
            // Notify user that the token request was not successful
            message = "There was a problem authenticating.";
        }

    }


    // The result will be a JSON object with an array of entities set to the value property
    public class AccountCollection
    {
        public Account[] value { get; set; }
    }
}
