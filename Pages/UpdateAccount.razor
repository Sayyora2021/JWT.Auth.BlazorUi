@page "/updateaccount/{accountIdString}"
@using JWT.Auth.BlazorUi.Models
@using System.Net.Http.Headers
@using JWT.Auth.BlazorUi.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager
@inject IAccountService AccountService
@inject IHttpClientFactory ClientFactory
@using System.Text.Json.Serialization;
@using System.Net.Http.Json
@using static JWT.Auth.BlazorUi.Pages.Contacts
@inject IAccessTokenProvider TokenProvider
@inject HttpClient Http
@inject ILogger<AccountService> Logger


<h3>Modifier le compte</h3>

@if (accountSelected != null)
{
  
    <form>
        <div class="form-group">
            <label for="inputNom">Nom</label>
            <input type="text" class="form-control" id="inputNom" @bind="accountSelected.name">
        </div>
        <div class="form-group">
            <label for="phone">Téléphone</label>
            <input type="text" class="form-control" id="phone" @bind="accountSelected.telephone1">
        </div>
        <div class="form-group">
            <label for="inputAddress">Adresse</label>
            <input type="text" class="form-control" id="inputAddress" @bind="accountSelected.address1_city">
        </div>
     
        <div class="form-group">
            <label for="inputContactEmail">Nom et email du contact principal</label>
            <select class="form-control" id="primarycontactid" @bind="selectedContactId">
               <option value=""> Aucun contact séléctionné</option>
                @if (contacts?.value != null)
                {
                    @foreach (var contact in contacts.value)
                    {
                        <option value="@contact.contactid">@contact.fullname, (@contact.emailaddress1)</option>
                    }
                }
                
            </select>

        </div>
    </form>
    <div style="margin-top: 20px;">
        <button type="button" class="btn btn-outline-primary" @onclick="()=> UpdateAccountAsync()">Modifier</button>
    </div>
}
else
{
    <p>Le compte n'a pas été trouvé.</p>
}

@code {
    [Parameter]
    public string accountIdString { get; set; }
    [Parameter]
    public string accountId { get; set; } 

    public Account accountSelected =new Account();
    // private Account accountSelected;
    public string ?selectedContactId;

    //Liste des Contacts pour sélectionner
    private ContactCollection contacts;

    // The result will be a JSON object with an array of entities set to the value property
    public class ContactCollection
    {
        public Contact[] value { get; set; }
    }
    //An informational message
    private string message = "Loading...";

    private JWT.Auth.BlazorUi.Models.Error error;

    protected override async Task OnInitializedAsync()
    {
        await GetAccountAsync();
        await GetContactsAsync();
        if(accountSelected.primarycontactid?.contactid!= null)
        {
            selectedContactId = accountSelected.primarycontactid.contactid.ToString();
        }
    }

    private async Task UpdateAccountAsync()
    {
        if (accountSelected == null)
        {
            Logger.LogError("Account ID or account details are missing.");
            return;
        }

        var updateAccount =  await SetParameterAsync();
        if (updateAccount != null)
        {
            if (!string.IsNullOrEmpty(selectedContactId))
            {
                await UpdatePrimaryContactAsync(updateAccount.accountid.ToString(), selectedContactId);
            }

            NavigationManager.NavigateTo($"/fetchaccounts");
        }
        else
        {
            Logger.LogError("Failed to update the account.");
        }


    }
    private async Task UpdatePrimaryContactAsync(string accountId, string contactId)
    {
        try
        {
            var tokenResult = await TokenProvider.RequestAccessToken();
            if (tokenResult.TryGetToken(out var token))
            {
                var client = ClientFactory.CreateClient("DataverseClient");
                var requestUrl = $"{client.BaseAddress}accounts({accountId})";

                
                var requestBody = new Dictionary<string, object>
            {
                { "@odata.type", "Microsoft.Dynamics.CRM.account" },
                { "primarycontactid@odata.bind", $"/contacts({contactId})" }
            };
                var request = new HttpRequestMessage
                    {
                        Method = HttpMethod.Patch,
                        RequestUri = new Uri(requestUrl),
                        Content = JsonContent.Create(requestBody)
                    };

                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                var response = await client.SendAsync(request);

                if (!response.IsSuccessStatusCode)
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Logger.LogError($"Failed to update primary contact: {error}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"An error occurred while updating primary contact: {ex.Message}");
        }
    }

    //GetContactList
    private async Task GetContactsAsync()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            var client = ClientFactory.CreateClient("DataverseClient");
            var requestUri = $"{client.BaseAddress}contacts?$select=fullname,emailaddress1,contactid";

            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri(requestUri)
                };

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                contacts = await response.Content.ReadFromJsonAsync<ContactCollection>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
            }
        }
    }

    //---GetAccountById method
    private async Task<Account> GetAccountAsync()
    {
        //Tries to get an access token for the current user with the default set of permissions.
        var tokenResult = await TokenProvider.RequestAccessToken();

        // If the token request was successful
        if (tokenResult.TryGetToken(out var token))
        {
            // Creates an HttpClient based on the named definition found in Program.Main
            var client = ClientFactory.CreateClient("DataverseClient");

            // Prepare the request to get the account by its ID
            var requestUri = $"{client.BaseAddress}accounts({accountIdString})?$select=name,telephone1,address1_city&$expand=primarycontactid($select=fullname,emailaddress1)";
            //var requestUri = $"{client.BaseAddress}accounts({accountIdString}))";


            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri(requestUri)

                };
            //Add the access token
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

            // Specify JSON result is expected
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            // Specify odata.include-annotations preference
            request.Headers.Add("Prefer", "odata.include-annotations=OData.Community.Display.V1.FormattedValue");

            // Send the request
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                // If successful, parse the JSON returned into a strongly typed Account
                accountSelected = await response.Content.ReadFromJsonAsync<Account>();
                return accountSelected;
               

            }
            else
            {

                // Handle errors (similar to your existing code)
                var error = await response.Content.ReadAsStringAsync();
                // Log or display error message
                Console.WriteLine(error);
                return null;
            }
        }
        else
        {
            // Notify user that the token request was not successful
            message = "There was a problem authenticating.";
        }
        return null;

    }

    //Update Account
    public async Task<Account> SetParameterAsync()
    {
        try
        {
            // Tries to get an access token for the current user with the default set of permissions.
            var tokenResult = await TokenProvider.RequestAccessToken();
            // If the token request was successful
            if (tokenResult.TryGetToken(out var token))
            {
                // Creates an HttpClient based on the named definition found in Program.Main
                var client = ClientFactory.CreateClient("DataverseClient");

                var accountToUpdate = new
                {
                    name = accountSelected.name,
                    telephone1 = accountSelected.telephone1,
                    address1_city = accountSelected.address1_city,
                   // primarycontactid = selectedContactId != null ? new { contactid = selectedContactId } : null
                };
                var requestUrl = $"{client.BaseAddress}accounts({accountIdString})";
               // var requestUrl = $"{client.BaseAddress}accounts({accountIdString})?$select=name,telephone1,address1_city&$expand=primarycontactid($select=fullname,emailaddress1)";
                // Prepare the request to update the account
                var request = new HttpRequestMessage()
                    {
                        Method =  HttpMethod.Patch,
                        RequestUri = new Uri(requestUrl),
                        Content = JsonContent.Create(accountToUpdate)
                    };

                // Add the access token
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

                // Include updated account data in the request body
                // request.Content = JsonContent.Create(accountSelected, typeof(Account));

                //Specify a JSON result is expected
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                request.Headers.Add("Prefer", "return=representation");

                // Send the request
                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    // If successful, you might want to do something (optional)
                    // For example, read the updated account information from the response
                    accountSelected = await response.Content.ReadFromJsonAsync<Account>();
                    return accountSelected;


                }
                else
                {
                    //Parse the JSON returned into a strongly typed Error
                   var error = await response.Content.ReadFromJsonAsync<Error>();
                   // error.statuscode = (int)response.StatusCode;
                    //error.reason = response.ReasonPhrase;
                    //Display a message to the user
                   // message = "An error occurred.";
                    //Log the details so they can be seen in the browser console
                    Logger.LogError($"{error.detail.message}");
                    return null;
                }
            }
            else
            {
                Logger.LogError("Failed to get access token.");
                // Notify user that the token request was not successful
                Console.WriteLine("Problème de modification.");
                return null;
            }

        }

        catch (Exception ex)
        {
            Logger.LogError($"An error occurred while updating account: {ex.Message}");
            return null;
        }
    }

}
