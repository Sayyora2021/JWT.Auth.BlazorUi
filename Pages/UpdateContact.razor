@page "/updatecontact/{contactIdString}"
@using JWT.Auth.BlazorUi.Models
@using System.Net.Http.Headers
@using JWT.Auth.BlazorUi.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@using System.Text.Json.Serialization;
@using System.Net.Http.Json
@using static JWT.Auth.BlazorUi.Pages.Contacts
@inject IAccessTokenProvider TokenProvider
@inject HttpClient Http
@inject ILogger<ContactService> Logger

<h3>Modifier un contact</h3>
@if(contactSelected != null)
{
    <form>
        <div class="form-group">
            <label for="inputNom">Nom</label>
            <input type="text" class="form-control" id="inputNom" @bind="contactSelected.firstname">
        </div>
        <div class="form-group">
            <label for="text">Prénom</label>
            <input type="text" class="form-control" id="inputPrenom" @bind="contactSelected.lastname">
        </div>
        <div class="form-group">
            <label for="text">Email</label>
            <input type="email" class="form-control" id="inputEmail" @bind="contactSelected.emailaddress1">
        </div>
    </form>
    <div style="margin-top: 20px;">
        <button type="button" class="btn btn-outline-primary" @onclick="()=> UpdateContactAsync()">Modifier</button>
    </div>
}
@code {
    [Parameter]
    public string contactIdString { get; set; }
    [Parameter]
    public string contactId { get; set; }

    public Contact contactSelected = new Contact();

    protected override async Task OnInitializedAsync()
    {

        await GetContactAsync();
       
    }
    private async Task UpdateContactAsync()
    {
        var result = await SetParameterAsync(contactSelected);
        NavigationManager.NavigateTo($"/contacts");

    }

    //An informational message
    private string message = "Loading...";

   private JWT.Auth.BlazorUi.Models.Error error;

    //---GetContactById method
    private async Task<Contact> GetContactAsync()
    {
        //Tries to get an access token for the current user with the default set of permissions.
        var tokenResult = await TokenProvider.RequestAccessToken();

        // If the token request was successful
        if (tokenResult.TryGetToken(out var token))
        {
            // Creates an HttpClient based on the named definition found in Program.Main
            var client = ClientFactory.CreateClient("DataverseClient");

            // Prepare the request to get the account by its ID
            var requestUri = $"{client.BaseAddress}contacts({contactIdString})?$select=firstname,lastname,emailaddress1";
            //var requestUri = $"{client.BaseAddress}accounts({accountIdString}))";


            var request = new HttpRequestMessage()
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri(requestUri)

                };
            //Add the access token
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

            // Specify JSON result is expected
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            // Specify odata.include-annotations preference
            request.Headers.Add("Prefer", "odata.include-annotations=OData.Community.Display.V1.FormattedValue");

            // Send the request
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                // If successful, parse the JSON returned into a strongly typed Account
                contactSelected = await response.Content.ReadFromJsonAsync<Contact>();
                return contactSelected;


            }
            else
            {

                // Handle errors (similar to your existing code)
                var error = await response.Content.ReadAsStringAsync();
                // Log or display error message
                Console.WriteLine(error);
                return null;
            }
        }
        else
        {
            // Notify user that the token request was not successful
            message = "There was a problem authenticating.";
        }
        return null;

    }
    //Update Contact
    public async Task<Contact> SetParameterAsync(Contact contactSelected)
    {
        try
        {
            // Tries to get an access token for the current user with the default set of permissions.
            var tokenResult = await TokenProvider.RequestAccessToken();
            // If the token request was successful
            if (tokenResult.TryGetToken(out var token))
            {
                // Creates an HttpClient based on the named definition found in Program.Main
                var client = ClientFactory.CreateClient("DataverseClient");

                //var requestUrl = $"{client.BaseAddress}accounts({accountIdString})";
                var requestUrl = $"{client.BaseAddress}contacts({contactIdString})?$select=lastname,firstname,emailaddress1";
                // Prepare the request to update the account
                var request = new HttpRequestMessage()
                    {
                        Method = HttpMethod.Patch,
                        //RequestUri = new Uri($"{client.BaseAddress}accounts?$select=name,telephone1,address1_city&$expand=primarycontactid($select=fullname,emailaddress1)"),
                        RequestUri = new Uri(requestUrl),
                        Content = JsonContent.Create(contactSelected)
                    };

                // Add the access token
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

                // Include updated account data in the request body
                request.Content = JsonContent.Create(contactSelected, typeof(Contact));

                //Specify a JSON result is expected
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                request.Headers.Add("Prefer", "return=representation");

                // Send the request
                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    // If successful, you might want to do something (optional)
                    // For example, read the updated account information from the response
                    contactSelected = await response.Content.ReadFromJsonAsync<Contact>();
                    return contactSelected;


                }
                else
                {
                    //Parse the JSON returned into a strongly typed Error
                    var error = await response.Content.ReadFromJsonAsync<Error>();
                    error.statuscode = (int)response.StatusCode;
                    error.reason = response.ReasonPhrase;
                    //Display a message to the user
                    message = "An error occurred.";
                    //Log the details so they can be seen in the browser console
                    //logger.LogError($"{error.detail.message}");
                    return null;
                }
            }
            else
            {
                // Notify user that the token request was not successful
                Console.WriteLine("Problème de modification.");
                return null;
            }

        }

        catch (Exception ex)
        {
            Logger.LogError($"An error occurred while updating account: {ex.Message}");
            return null;
        }
    }
}
